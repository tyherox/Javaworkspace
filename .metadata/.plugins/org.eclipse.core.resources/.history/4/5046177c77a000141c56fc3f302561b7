import java.util.ArrayList;


public class Computer {

	static ArrayList<JBoardT> temp = new ArrayList<JBoardT>();
	static ArrayList<JBoardT> cBoard = new ArrayList<JBoardT>();
	static int score = 0;
	static int ts = 0;
	static JBoardT place;
	
	public void clear()
	{
		temp.clear();
		cBoard.clear();
	}
	public void startMove(ArrayList<JBoardT> board){
		
		System.out.println("at ai: " + cBoard.size());
		temp = board;
		for(int i = 0; i<temp.size();i++)
		{
			JBoardT t = temp.get(i);
			cBoard.add(t);
			System.out.println("at ai process: " + i);
			if(cBoard.size()>=3)
			{
				if(MainFrame.victory(cBoard)==true)
				{
					place = t;
					break;
				}
			}
			else
			{
				ts = miniMax();
				if(score<ts){
					score = ts;
					place = t;
				}
			}
			cBoard.remove(t);
		}
		
		Board.updateBoard(place);
		cBoard.add(place);
	}
	
	////// miniMax/////
	
	static int depth = 0;
	boolean aiTurn = false;
	static int goal;
	int s = 0;
	int z = 0;
	
	private int miniMax(){
		
		System.out.println("at minimax");
		if(aiTurn==true)
		{
			goal = 100000000;
			depth = Math.abs(depth);
			depth++;
		}
		else
		{
			goal = -100000000;
			depth = -depth;
			depth--;
		}
		depth++;
		
		for(int i = 0; i<temp.size();i++)
		{
			JBoardT t = temp.get(i);
			temp.remove(i);
			cBoard.add(t);
			System.out.println("at minimax processing");
			if(cBoard.size()>=3)
			{
				if(MainFrame.victory(cBoard)==true)
				{
					temp.add(t);
					cBoard.remove(t);
					if(aiTurn==true)
					{
						depth--;
					}
					else
					{
						depth++;
					}
					return goal - depth;
				}
				else
				{
					System.out.println("at minimax processing: no win");
					aiTurn=!aiTurn;
					z = miniMax();
					if(goal-z<goal-s)
					{
						s=z;
					}
				}
			}
			
			temp.add(t);
			cBoard.remove(t);
			
			if(aiTurn==true)
			{
				depth--;
			}
			else
			{
				depth++;
			}
			return s;
		}
		
		return 0;
	}
	
	/////////
	
	private int[] coordinate(){
		return null;
	}
}
