import java.util.ArrayList;


public class Computer {

	static ArrayList<JBoardT> temp = new ArrayList<JBoardT>();
	static ArrayList<JBoardT> cBoard = new ArrayList<JBoardT>();
	static ArrayList<JBoardT> pBoard = new ArrayList<JBoardT>();
	static int score = 0;
	static int ts = 0;
	static JBoardT place;
	static int p = 0;
	
	public static void test(JBoardT a, JBoardT b)
	{
		cBoard.add(a);
		Board.updateBoard(a);
		cBoard.add(b);
		Board.updateBoard(b);
	}
	
	public static void updateAi(JBoardT a)
	{
		pBoard.add(a);
	}
	
	public void clear()
	{
		temp.clear();
		cBoard.clear();
	}
	public void startMove(ArrayList<JBoardT> board){
		
		System.out.println("at ai: " + board.size());
		temp = board;
		for(int i = 0; i<temp.size();i++)
		{
			JBoardT t = temp.get(i);
			cBoard.add(t);
			System.out.println("at ai process: " + i);
			if(cBoard.size()>=3)
			{
				if(MainFrame.victory(cBoard)==true)
				{
					System.out.println("preVictory");
					place = t;
					break;
				}
			}
			
			ts = miniMax();
			System.out.println("score for minimax" + ts);
			if(score<ts){
				System.out.println("changed score");
				score = ts;
				place = t;
				System.out.println("i value" + t.getXC() + ", " + t.getYC());
			}
			
			cBoard.remove(t);
		}
		
		Board.updateBoard(place);
		cBoard.add(place);
	}
	
	////// miniMax/////
	
	static int depth = 0;
	boolean aiTurn = false;
	static int goal = 10000000;
	int sa = 0;
	int za = 0;
	int sp = 0;
	int zp = 0;
	JBoardT pc;
	JBoardT ac; 
	
	private int miniMax(){
		
		System.out.println("at minimax");
		depth++;
		
		if(aiTurn==true)
		{
			for(int i = 0; i<temp.size();i++)
			{
				JBoardT t = temp.get(i);
				temp.remove(i);
				cBoard.add(t);
				System.out.println("at minimax processing: ai");
				
				if(MainFrame.victory(cBoard)==true)
				{
					System.out.println("at minimax processing: ai win");
					temp.add(t);
					cBoard.remove(t);
					return goal - depth;
				}
				else
				{
					System.out.println("at minimax processing: ai no win");
					aiTurn=!aiTurn;
					za = miniMax();
					aiTurn=!aiTurn;
					depth--;
					if(za>sa)
					{
						sa=za;
					}
					temp.add(t);
					cBoard.remove(t);
				}
			}
			depth--;
			return sa;
		}
		
		if(aiTurn==false)
		{
			for(int i = 0; i<temp.size();i++)
			{
				JBoardT t = temp.get(i);
				temp.remove(i);
				pBoard.add(t);
				System.out.println("at minimax processing: player");
				
				if(MainFrame.victory(pBoard)==true)
				{
					System.out.println("at minimax processing: player win");
					temp.add(t);
					pBoard.remove(t);
					return -goal + depth;
				}
				else
				{
					System.out.println("at minimax processing: player no win");
					aiTurn=!aiTurn;
					zp = miniMax();
					aiTurn=!aiTurn;
					depth--;
					if(zp<sp)
					{
						sp=zp;
					}
					temp.add(t);
					pBoard.remove(t);
				}
			}
			depth--;
			return sp;
		}
		
		depth--;
		return 0;
	}
	
	/////////
	
	private int[] coordinate(){
		return null;
	}
}
